// ignore_for_file: camel_case_types, prefer_final_fields, unnecessary_import, use_key_in_widget_constructors, prefer_const_constructors, prefer_const_literals_to_create_immutables, unused_local_variable, non_constant_identifier_names

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/widgets.dart';
import 'package:ism/Class/Api_URL.dart';
import 'package:ism/Class/Colorconstat.dart';
import 'package:ism/Common_Screen/sessionNsessionyear.dart';
import 'package:ism/Model/Cbcs_CourceModel.dart';
import 'package:ism/Model/DashboardModel.dart';
import 'package:ism/Screen(Professor)/CreateAttendance.dart';
import 'package:ism/Screen(Professor)/DrawerProfessor.dart';
import 'package:ism/Screen(Professor)/Edit/ListofDate.dart';
import 'package:ism/Screen(Professor)/Report/ReportDateList.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;

class AttendanceByDay extends StatefulWidget {
  @override
  _AttendanceByDayState createState() => _AttendanceByDayState();
}

class _AttendanceByDayState extends State<AttendanceByDay> {
  TextEditingController _searchController = TextEditingController();

  List<Ssesion> sessionlist = [];
  List<SessionYear> sessionyearlist = [];
  List<SessionYear> TotalAssignClass = [];
  List<StudentData> CourseList = [];

  String? sessionname;
  String? sessionyearname;
  @override
  void initState() {
    super.initState();
    getsession();
    _performSearch();
    // _LoadSession();

    // _LoadAssignClass("","");
  }

  bool dealy = false;
  void _performSearch() async {
    await Future.delayed(Duration(seconds: 4)); // 2-second delay
    setState(() {
      dealy = true;
    });
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  bool isLoading = false;
  Future<void> getsession() async {
    SharedPreferences preferences = await SharedPreferences.getInstance();
    String? session = preferences.getString('session');
    String? token = preferences.getString('token');
    String? sessionyear = preferences.getString('sessionyear');
    setState(() {
      sessionname = session.toString();
      sessionyearname = sessionyear.toString();
    });
    _LoadAssignClass(session.toString(), sessionyear.toString());
  }

  Future<void> _LoadSession() async {
    setState(() {
      isLoading = true;
    });

    try {
      SharedPreferences preferences = await SharedPreferences.getInstance();
      String? token = preferences.getString('token');

      final Uri uri = Uri.parse('${ApiConstants.baseUrl}sessionyear');
      final Map<String, String> headers = {
        'Accept': 'application/json',
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      };

      final response = await http.get(uri, headers: headers);

      if (response.statusCode == 200) {
        final jsonData = jsonDecode(response.body);

        if (jsonData is Map) {
          final session = jsonData['session'];
          final session_year = jsonData['session_year'];

          if (session is List) {
            List<Ssesion> sessionList = [];

            for (var item in session) {
              sessionList.add(Ssesion.fromJson(item));
            }

            setState(() {
              sessionList.reversed;
              sessionlist = sessionList;
            });
          } else {
            print('session_year key not found or is not a list.');
          }

          if (session_year is List) {
            List<SessionYear> sessionYearList = [];

            for (var item in session_year) {
              sessionYearList.add(SessionYear.fromJson(item));
            }

            setState(() {
              sessionYearList.reversed;
              sessionyearlist = sessionYearList;
            });
          } else {
            print('session_year key not found or is not a list.');
          }
        } else {
          print('Data key not found in JSON.');
        }
      } else {
        print('HTTP request failed with status: ${response.statusCode}');
      }
    } catch (err) {
      print('An error occurred: $err');
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  String sessiondata = '';
  String sessioyeardata = '';
  Future<void> _LoadAssignClass(String session, String sessionyear) async {
    setState(() {
      isLoading = true;
    });

    try {
      SharedPreferences preferences = await SharedPreferences.getInstance();
      String? token = preferences.getString('token');
      String? userid = preferences.getString('userids');
      setState(() {
        sessiondata = session;
        sessioyeardata = sessionyear;
      });

      final Uri uri = Uri.parse('${ApiConstants.baseUrl}AsignCourse');
      final Map<String, String> headers = {
        'Accept': 'application/json',
        'Authorization': 'Bearer $token',
        'Content-Type': 'application/json',
      };

      final Map<String, dynamic> body = {
        'auth_id': userid,
        'session': session,
        'sessionyear': sessionyear,
      };

      final response =
          await http.post(uri, headers: headers, body: jsonEncode(body));

      if (response.statusCode == 200) {
        final jsonData = jsonDecode(response.body);

        if (jsonData is Map) {
          final courseData = jsonData['Course_Data'];

          if (courseData is List) {
            List<StudentData> sessionList = [];

            for (var item in courseData) {
              sessionList.add(StudentData.fromJson(item));
            }

            setState(() {
              CourseList = sessionList.reversed.toList();
            });
          } else {
            print('Course_Data key not found or is not a list.');
          }
        } else {
          print('Data key not found in JSON.');
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Data Not Found')),
        );
        setState(() {
          CourseList = [];
        });

        // print('HTTP request failed with status: ${response.statusCode}');
      }
    } catch (err) {
      print('An error occurred: $err');
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  Ssesion? selectedSession;
  SessionYear? selectedSessionYear;
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    if (CourseList.isNotEmpty) {
      // if(sessionlist.isNotEmpty &&sessionyearlist.isNotEmpty){
      return Scaffold(
        key: _scaffoldKey,
        appBar: AppBar(
          title: Text(
            "Edit Attendance",
            style: TextStyle(color: ColorConstant.whiteA700),
          ),
          leading: InkWell(
            onTap: () {
              _scaffoldKey.currentState?.openDrawer();
            },
            child: Icon(Icons.menu, color: ColorConstant.whiteA700),
          ),
          backgroundColor: ColorConstant.ismcolor,
        ),
        drawer: CustomDrawerProfessor(),
        body: Column(
          children: [
            /*Container(
                width: double.infinity,
              padding: EdgeInsets.all(16.0),
              margin: EdgeInsets.symmetric(vertical: 10.0),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(10.0),
                boxShadow: [
                  BoxShadow(
                    color: Colors.grey.withOpacity(0.5),
                    spreadRadius: 2,
                    blurRadius: 5,
                    offset: Offset(0, 3),
                  ),
                ],
                border: Border.all(
                  color: ColorConstant.ismcolor,
                  width: 2,
                ),
              ),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  DropdownButtonHideUnderline(
                    child: DropdownButton<Ssesion>(
                      value: selectedSession,
                      hint: Text('Session'),
                      onChanged: (Ssesion? newValue) {
                        setState(() {
                          selectedSession = newValue;
                          sessionname =selectedSession!.session;
                        });
                      },
                      items: sessionlist.map<DropdownMenuItem<Ssesion>>((Ssesion value) {
                        return DropdownMenuItem<Ssesion>(
                          value: value,
                          child: Text(value.session,style: TextStyle(color:  ColorConstant.ismcolor),),
                        );
                      }).toList(),
                      dropdownColor: ColorConstant.whiteA700,
                        style: TextStyle(color:  ColorConstant.ismcolor, fontSize: 16),
                        icon: Icon(Icons.arrow_drop_down, color:  ColorConstant.ismcolor),
                    ),
                  ),
                DropdownButtonHideUnderline(
                    child: DropdownButton<SessionYear>(
                      value: selectedSessionYear,
                      hint: Text('Session Year', style: TextStyle(color: Colors.grey[600])),
                      onChanged: (SessionYear? newValue) {
                        setState(() {
                          selectedSessionYear = newValue;
                          sessionyearname = selectedSessionYear?.sessionYear;
                        });
                      },
                      items: sessionyearlist.map<DropdownMenuItem<SessionYear>>((SessionYear value) {
                        return DropdownMenuItem<SessionYear>(
                          value: value,
                          child: Text(
                            value.sessionYear,
                            style: TextStyle(color:  ColorConstant.ismcolor),
                          ),
                        );
                      }).toList(),
                      dropdownColor: ColorConstant.whiteA700,
                      style: TextStyle(color:  ColorConstant.ismcolor, fontSize: 16),
                      icon: Icon(Icons.arrow_drop_down, color:  ColorConstant.ismcolor),
                    ),
                  ),
                  ElevatedButton(
                    onPressed: () {
                      _LoadAssignClass(sessionname,sessionyearname);
                      // Handle submit action
                      print('Selected Session: ${sessionname}, Selected Year: ${sessionyearname}');
                    },
                     style: ElevatedButton.styleFrom(
                  backgroundColor: ColorConstant.ismcolor,
                  // elevation: 3,
                ),
                    child: Text('Submit',style: TextStyle(color: ColorConstant.whiteA700),),
                  ),
                ],
              ),
            ), */
            if (CourseList.isNotEmpty)
              Expanded(
                child: ListView.builder(
                  itemCount: CourseList.length,
                  itemBuilder: (context, index) {
                    int id = index + 1; // Generates an ID starting from 1
                    String length = CourseList[index].toString();
                    return Padding(
                      padding: const EdgeInsets.only(
                          left: 8.0, right: 8.0, bottom: 5, top: 8.0),
                      child: InkWell(
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => NEwListOfDAte(
                                      sub_id: CourseList[index]
                                          .subOfferedId
                                          .toString(),
                                      session: sessiondata.toString(),
                                      sessionyear: sessioyeardata.toString(),
                                    )),
                          );
                        },
                        child: Container(
                          height: 70,
                          decoration: BoxDecoration(
                            border: Border.all(width: 0.5),
                            borderRadius: BorderRadius.circular(10),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.start,
                            crossAxisAlignment: CrossAxisAlignment.center,
                            children: [
                              Flexible(
                                flex: 1,
                                child: Container(
                                  height: double.infinity,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadiusDirectional.only(
                                      topStart: Radius.circular(10),
                                      bottomStart: Radius.circular(10),
                                    ),
                                    color: ColorConstant.ismcolor,
                                  ),
                                  child: Center(
                                    child: Text(
                                      id.toString(),
                                      style: TextStyle(
                                          color: ColorConstant.whiteA700),
                                    ),
                                  ),
                                ),
                              ),
                              Flexible(
                                flex: 7,
                                child: Container(
                                  width: 300,
                                  child: Padding(
                                    padding: const EdgeInsets.all(5.0),
                                    child: SingleChildScrollView(
                                        scrollDirection: Axis.horizontal,
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          children: [
                                            Text(CourseList[index].subId,
                                                style: TextStyle(fontSize: 16)),
                                            if (CourseList[index].subId !=
                                                    null &&
                                                CourseList[index].subId != "")
                                              Text(
                                                  "Section : " +
                                                      CourseList[index].section,
                                                  style:
                                                      TextStyle(fontSize: 16)),
                                            // Text('Subject Code : 41245', style: TextStyle(fontSize: 16)),
                                          ],
                                        )),
                                  ),
                                ),
                              ),
                              Flexible(
                                flex: 1,
                                child: Container(
                                  width: 250,
                                  child: Padding(
                                    padding: const EdgeInsets.all(5.0),
                                    child: SingleChildScrollView(
                                        scrollDirection: Axis.horizontal,
                                        child: Column(
                                          crossAxisAlignment:
                                              CrossAxisAlignment.start,
                                          mainAxisAlignment:
                                              MainAxisAlignment.center,
                                          children: [Icon(Icons.arrow_forward)],
                                        )),
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            if (CourseList.isEmpty)
              Center(
                child: Padding(
                  padding: const EdgeInsets.only(top: 250.0),
                  child: Text(
                    "Please Select Session and Session Year",
                    style: TextStyle(fontSize: 18),
                  ),
                ),
              )
          ],
        ),
      );
    } else if (CourseList.isEmpty && dealy == true) {
      return Scaffold(
        key: _scaffoldKey,
        appBar: AppBar(
          title: Row(
            children: [
              // if(sessionname =='')
              Text(
                "Session",
                style: TextStyle(color: ColorConstant.whiteA700),
              ),
              // if(sessionyearname =='')

              Padding(
                padding: const EdgeInsets.only(left: 5.0),
                child: Text(
                  'session year',
                  style: TextStyle(color: ColorConstant.whiteA700),
                ),
              ),
            ],
          ),
          leading: InkWell(
            onTap: () {
              _scaffoldKey.currentState?.openDrawer();
            },
            child: Icon(Icons.menu, color: ColorConstant.whiteA700),
          ),
          backgroundColor: ColorConstant.ismcolor,
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                "No Course",
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              ElevatedButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => Session_SetScreen()),
                    );
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: ColorConstant.ismcolor,
                    // elevation: 3,
                  ),
                  child: Text(
                    "Set Session And Session year",
                    style: TextStyle(color: ColorConstant.whiteA700),
                  )),
            ],
          ),
        ),
      );
    } else {
      return Scaffold(
        appBar: AppBar(
          title: Text(
            "All Course",
            style: TextStyle(color: ColorConstant.whiteA700),
          ),
          leading: InkWell(
            onTap: () {
              Navigator.pop(context);
            },
            child: Icon(Icons.arrow_back_ios, color: ColorConstant.whiteA700),
          ),
          backgroundColor: ColorConstant.ismcolor,
        ),
        body: Center(
          child: CircularProgressIndicator(),
        ),
      );
    }
  }
}
